//name: CountSubsequenceTable
//language: javascript
//input: dataframe df
//input: column colName
//input: string subseq = ATG

grok.functions.call(
  "Andrewtuzhykov:CountSubsequencePython", {
    'inputDf': DG.DataFrame.fromColumns([df.col(colName)]),
    'outputColName': `N(${subseq})`,
    'subseq': subseq 
  }).then((resultDf) => {
    df.columns.insert(resultDf.columns.byIndex(0));
  });
  
  
  
#name: CountSubsequencePython
#language: python
#input: dataframe inputDf
#input: column inputColName
#input: string outputColName
#input: string subseq
#output: dataframe outputDf


outputDf = pd.DataFrame()
outputDf[outputColName] = inputDf[inputColName].apply(lambda x: x.count(subseq))


//name: CountSubsequenceJS
//language: javascript
//input: dataframe inputDf
//input: string outputColName 
//input: string subseq
//output: dataframe outputDf

let rgxp = new RegExp(subseq, "g");
let newCol = df.columns.byIndex(0);;
for (let i = 0; i < newCol.length; ++i) { 
  const seq = inputDf.get('sequence', i);
  const count = (seq.match(rgxp) || []).length; 
  newCol.set(i, count);
}
outputDf = DG.DataFrame.fromColumns([newCol]);
